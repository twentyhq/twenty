name: GraphQL and OpenAPI Breaking Changes Detection

on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAIN_SERVER_PORT: 3000
  CURRENT_SERVER_PORT: 3002

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  changed-files-check:
    uses: ./.github/workflows/changed-files.yaml
    with:
      files: |
        package.json
        packages/twenty-server/**
        packages/twenty-emails/**
        packages/twenty-shared/**

  api-breaking-changes:
    needs: changed-files-check
    if: needs.changed-files-check.outputs.any_changed == 'true'
    timeout-minutes: 45
    runs-on: depot-ubuntu-24.04-8
    env:
      NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
    services:
      postgres:
        image: twentycrm/twenty-postgres-spilo
        env:
          PGUSER_SUPERUSER: postgres
          PGPASSWORD_SUPERUSER: postgres
          ALLOW_NOSSL: 'true'
          SPILO_PROVIDER: 'local'
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
      clickhouse:
        image: clickhouse/clickhouse-server:latest
        env:
          CLICKHOUSE_PASSWORD: clickhousePassword
          CLICKHOUSE_URL: "http://default:clickhousePassword@localhost:8123/twenty"
        ports:
          - 8123:8123
          - 9000:9000
        options: >-
          --health-cmd "clickhouse-client --host=localhost --port=9000 --user=default --password=clickhousePassword --query='SELECT 1'" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        uses: ./.github/workflows/actions/yarn-install

      - name: Build shared dependencies
        run: |
          npx nx build twenty-shared
          npx nx build twenty-emails

      - name: Build current branch server
        run: npx nx build twenty-server

      - name: Setup databases
        run: |
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d postgres -c 'CREATE DATABASE "current_branch";'
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d postgres -c 'CREATE DATABASE "main_branch";'

      - name: Run ClickHouse migrations
        run: npx nx clickhouse:migrate twenty-server
        env:
          CLICKHOUSE_URL: http://default:clickhousePassword@localhost:8123/twenty
          CLICKHOUSE_PASSWORD: clickhousePassword

      - name: Setup current branch database
        run: |
          npx nx reset:env twenty-server
          # Function to set or update environment variable
          set_env_var() {
            local var_name="$1"
            local var_value="$2"
            local env_file="packages/twenty-server/.env"
            
            if grep -q "^${var_name}=" "$env_file"; then
              sed -i "s|^${var_name}=.*|${var_name}=${var_value}|" "$env_file"
            else
              echo "${var_name}=${var_value}" >> "$env_file"
            fi
          }
          
          set_env_var "PG_DATABASE_URL" "postgres://postgres:postgres@localhost:5432/current_branch"
          set_env_var "NODE_PORT" "${{ env.CURRENT_SERVER_PORT }}"
          set_env_var "REDIS_URL" "redis://localhost:6379"
          set_env_var "CLICKHOUSE_URL" "http://default:clickhousePassword@localhost:8123/twenty"
          set_env_var "CLICKHOUSE_PASSWORD" "clickhousePassword"
          
          npx nx run twenty-server:database:init:prod
          npx nx run twenty-server:database:migrate:prod

      - name: Seed current branch database with test data
        run: |
          npx nx command-no-deps twenty-server -- workspace:seed:dev

      - name: Start current branch server in background
        run: |
          echo "=== Current branch .env file contents ==="
          cat packages/twenty-server/.env
          echo "=== Starting current branch server ==="
          nohup npx nx run twenty-server:start:prod > /tmp/current-server.log 2>&1 &
          echo $! > /tmp/current-server.pid
          echo "Current server PID: $(cat /tmp/current-server.pid)"

      - name: Wait for current branch server to be ready
        run: |
          echo "Waiting for current branch server to start..."
          timeout=300
          interval=5
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            if curl -s "http://localhost:${{ env.CURRENT_SERVER_PORT }}/graphql" > /dev/null 2>&1 && \
               curl -s "http://localhost:${{ env.CURRENT_SERVER_PORT }}/rest/open-api/core" > /dev/null 2>&1; then
              echo "Current branch server is ready!"
              break
            fi
            
            echo "Current branch server not ready yet, waiting ${interval}s..."
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "Timeout waiting for current branch server to start"
            echo "Current server log:"
            cat /tmp/current-server.log || echo "No current server log found"
            exit 1
          fi

      - name: Download GraphQL and REST responses from current branch
        run: |
          # Admin token from jest-integration.config.ts
          ADMIN_TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMDIwMjAyMC05ZTNiLTQ2ZDQtYTU1Ni04OGI5ZGRjMmIwMzQiLCJ3b3Jrc3BhY2VJZCI6IjIwMjAyMDIwLTFjMjUtNGQwMi1iZjI1LTZhZWNjZjdlYTQxOSIsIndvcmtzcGFjZU1lbWJlcklkIjoiMjAyMDIwMjAtMDY4Ny00YzQxLWI3MDctZWQxYmZjYTk3MmE3IiwidXNlcldvcmtzcGFjZUlkIjoiMjAyMDIwMjAtOWUzYi00NmQ0LWE1NTYtODhiOWRkYzJiMDM1IiwiaWF0IjoxNzM5NTQ3NjYxLCJleHAiOjMzMjk3MTQ3NjYxfQ.fbOM9yhr3jWDicPZ1n771usUURiPGmNdeFApsgrbxOw"
          
          # Full introspection query (based on GraphQL specification)
          INTROSPECTION_QUERY='query IntrospectionQuery {
            __schema {
              queryType { name }
              mutationType { name }
              subscriptionType { name }
              types {
                kind
                name
                description
                fields(includeDeprecated: true) {
                  name
                  description
                  args {
                    name
                    description
                    type {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                          name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                                ofType {
                                  kind
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    defaultValue
                  }
                  type {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                          name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                                ofType {
                                  kind
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  isDeprecated
                  deprecationReason
                }
                inputFields {
                  name
                  description
                  type {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                          name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                                ofType {
                                  kind
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  defaultValue
                }
                interfaces {
                  kind
                  name
                  ofType {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                            name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                enumValues(includeDeprecated: true) {
                  name
                  description
                  isDeprecated
                  deprecationReason
                }
                possibleTypes {
                  kind
                  name
                  ofType {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                          name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              directives {
                name
                description
                locations
                args {
                  name
                  description
                  type {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                          name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                                ofType {
                                  kind
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  defaultValue
                }
              }
            }
          }'
          
          echo "Downloading GraphQL schema from current server..."
          curl -X POST "http://localhost:${{ env.CURRENT_SERVER_PORT }}/graphql" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ADMIN_TOKEN" \
            -d "{\"query\":\"$(echo "$INTROSPECTION_QUERY" | tr '\n' ' ' | sed 's/"/\\"/g')\"}" \
            -o current-schema-introspection.json
          
          # Download metadata schema as well
          echo "Downloading GraphQL metadata schema from current server..."
          curl -X POST "http://localhost:${{ env.CURRENT_SERVER_PORT }}/metadata" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ADMIN_TOKEN" \
            -d "{\"query\":\"$(echo "$INTROSPECTION_QUERY" | tr '\n' ' ' | sed 's/"/\\"/g')\"}" \
            -o current-metadata-schema-introspection.json
          
          # Download current branch OpenAPI specs
          echo "Downloading OpenAPI specifications from current server..."
          curl -s "http://localhost:${{ env.CURRENT_SERVER_PORT }}/rest/open-api/core" > current-rest-api.json
          curl -s "http://localhost:${{ env.CURRENT_SERVER_PORT }}/rest/open-api/metadata" > current-rest-metadata-api.json
          
          # Verify the downloads
          echo "Current branch schema download results:"
          ls -la current-*
          
          # Check if the responses contain actual schema data
          echo "Current schema response preview:"
          head -c 200 current-schema-introspection.json
          echo ""
          echo "Current metadata schema response preview:"
          head -c 200 current-metadata-schema-introspection.json
          echo ""
          echo "Current OpenAPI specs sizes:"
          wc -c current-*.json

      - name: Preserve current branch files
        run: |
          # Create a temp directory to store current branch files
          mkdir -p /tmp/current-branch-files
          
          # Move current branch files to temp directory
          mv current-* /tmp/current-branch-files/ 2>/dev/null || echo "No current-* files to move"
          
          # List what we've preserved
          echo "Preserved current branch files:"
          ls -la /tmp/current-branch-files/

      - name: Stop current branch server
        run: |
          if [ -f /tmp/current-server.pid ]; then
            echo "Stopping current branch server..."
            kill $(cat /tmp/current-server.pid) || true
            # Wait a bit for graceful shutdown
            sleep 5
            # Force kill if still running
            kill -9 $(cat /tmp/current-server.pid) 2>/dev/null || true
            rm -f /tmp/current-server.pid
          fi

      - name: Checkout main branch
        run: |
          git stash
          git checkout origin/main
          git clean -fd

      - name: Install dependencies for main branch
        uses: ./.github/workflows/actions/yarn-install

      - name: Build main branch dependencies
        run: |
          npx nx build twenty-shared
          npx nx build twenty-emails

      - name: Build main branch server
        run: npx nx build twenty-server

      - name: Setup main branch database
        run: |
          # Function to set or update environment variable
          set_env_var() {
            local var_name="$1"
            local var_value="$2"
            local env_file="packages/twenty-server/.env"
            
            if grep -q "^${var_name}=" "$env_file"; then
              sed -i "s|^${var_name}=.*|${var_name}=${var_value}|" "$env_file"
            else
              echo "${var_name}=${var_value}" >> "$env_file"
            fi
          }
          
          set_env_var "PG_DATABASE_URL" "postgres://postgres:postgres@localhost:5432/main_branch"
          set_env_var "NODE_PORT" "${{ env.MAIN_SERVER_PORT }}"
          
          npx nx run twenty-server:database:init:prod
          npx nx run twenty-server:database:migrate:prod

      - name: Seed main branch database with test data
        run: |
          npx nx command-no-deps twenty-server -- workspace:seed:dev

      - name: Start main branch server in background
        run: |
          echo "=== Main branch .env file contents ==="
          cat packages/twenty-server/.env
          echo "=== Starting main branch server ==="
          nohup npx nx run twenty-server:start:prod > /tmp/main-server.log 2>&1 &
          echo $! > /tmp/main-server.pid
          echo "Main server PID: $(cat /tmp/main-server.pid)"

      - name: Wait for main branch server to be ready
        run: |
          echo "Waiting for main branch server to start..."
          timeout=300
          interval=5
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            if curl -s "http://localhost:${{ env.MAIN_SERVER_PORT }}/graphql" > /dev/null 2>&1 && \
               curl -s "http://localhost:${{ env.MAIN_SERVER_PORT }}/rest/open-api/core" > /dev/null 2>&1; then
              echo "Main branch server is ready!"
              break
            fi
            
            echo "Main branch server not ready yet, waiting ${interval}s..."
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "Timeout waiting for main branch server to start"
            echo "Main server log:"
            cat /tmp/main-server.log || echo "No main server log found"
            exit 1
          fi

      - name: Download GraphQL and REST responses from main branch
        run: |
          # Admin token from jest-integration.config.ts
          ADMIN_TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMDIwMjAyMC05ZTNiLTQ2ZDQtYTU1Ni04OGI5ZGRjMmIwMzQiLCJ3b3Jrc3BhY2VJZCI6IjIwMjAyMDIwLTFjMjUtNGQwMi1iZjI1LTZhZWNjZjdlYTQxOSIsIndvcmtzcGFjZU1lbWJlcklkIjoiMjAyMDIwMjAtMDY4Ny00YzQxLWI3MDctZWQxYmZjYTk3MmE3IiwidXNlcldvcmtzcGFjZUlkIjoiMjAyMDIwMjAtOWUzYi00NmQ0LWE1NTYtODhiOWRkYzJiMDM1IiwiaWF0IjoxNzM5NTQ3NjYxLCJleHAiOjMzMjk3MTQ3NjYxfQ.fbOM9yhr3jWDicPZ1n771usUURiPGmNdeFApsgrbxOw"
          
          # Full introspection query (based on GraphQL specification)
          INTROSPECTION_QUERY='query IntrospectionQuery {
            __schema {
              queryType { name }
              mutationType { name }
              subscriptionType { name }
              types {
                kind
                name
                description
                fields(includeDeprecated: true) {
                  name
                  description
                  args {
                    name
                    description
                    type {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                          name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                                ofType {
                                  kind
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    defaultValue
                  }
                  type {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                          name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                                ofType {
                                  kind
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  isDeprecated
                  deprecationReason
                }
                inputFields {
                  name
                  description
                  type {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                          name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                                ofType {
                                  kind
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  defaultValue
                }
                interfaces {
                  kind
                  name
                  ofType {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                            name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                enumValues(includeDeprecated: true) {
                  name
                  description
                  isDeprecated
                  deprecationReason
                }
                possibleTypes {
                  kind
                  name
                  ofType {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                          name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              directives {
                name
                description
                locations
                args {
                  name
                  description
                  type {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                        ofType {
                          kind
                          name
                          ofType {
                            kind
                            name
                            ofType {
                              kind
                              name
                              ofType {
                                kind
                                name
                                ofType {
                                  kind
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  defaultValue
                }
              }
            }
          }'
          
          echo "Downloading GraphQL schema from main server..."
          curl -X POST "http://localhost:${{ env.MAIN_SERVER_PORT }}/graphql" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ADMIN_TOKEN" \
            -d "{\"query\":\"$(echo "$INTROSPECTION_QUERY" | tr '\n' ' ' | sed 's/"/\\"/g')\"}" \
            -o main-schema-introspection.json
          
          echo "Downloading GraphQL metadata schema from main server..."
          curl -X POST "http://localhost:${{ env.MAIN_SERVER_PORT }}/metadata" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ADMIN_TOKEN" \
            -d "{\"query\":\"$(echo "$INTROSPECTION_QUERY" | tr '\n' ' ' | sed 's/"/\\"/g')\"}" \
            -o main-metadata-schema-introspection.json
          
          # Download main branch OpenAPI specs
          echo "Downloading OpenAPI specifications from main server..."
          curl -s "http://localhost:${{ env.MAIN_SERVER_PORT }}/rest/open-api/core" > main-rest-api.json
          curl -s "http://localhost:${{ env.MAIN_SERVER_PORT }}/rest/open-api/metadata" > main-rest-metadata-api.json
          
          # Verify the downloads
          echo "Main branch schema download results:"
          ls -la main-*
          
          # Check if the responses contain actual schema data
          echo "Main schema response preview:"
          head -c 200 main-schema-introspection.json
          echo ""
          echo "Main metadata schema response preview:"
          head -c 200 main-metadata-schema-introspection.json
          echo ""
          echo "Main OpenAPI specs sizes:"
          wc -c main-*.json

      - name: Restore current branch files
        run: |
          # Move current branch files back to working directory
          mv /tmp/current-branch-files/* . 2>/dev/null || echo "No files to restore"
          
          # Verify all files are present
          echo "All API files after restoration:"
          ls -la current-* main-* 2>/dev/null || echo "Some files may be missing"
          
          # Clean up temp directory
          rm -rf /tmp/current-branch-files
          
          # Final verification of all downloaded files
          echo "All downloaded API files:"
          ls -la *-*.json

      - name: Check GraphQL Schema for Breaking Changes
        uses: graphql-hive/graphql-inspector@master
        with:
          name: 'GraphQL Schema Breaking Changes'
          schema: 'current-schema-introspection.json'
          endpoint: 'main-schema-introspection.json'
          fail-on-breaking: true
          annotations: true

      - name: Check GraphQL Metadata Schema for Breaking Changes
        uses: graphql-hive/graphql-inspector@master
        with:
          name: 'GraphQL Metadata Schema Breaking Changes'
          schema: 'current-metadata-schema-introspection.json'
          endpoint: 'main-metadata-schema-introspection.json'
          fail-on-breaking: true
          annotations: true

      - name: Setup Java for OpenAPI Diff
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Check REST API Breaking Changes
        run: |
          # Download openapi-diff CLI
          wget -q https://repo1.maven.org/maven2/org/openapitools/openapi-diff-cli/2.1.2/openapi-diff-cli-2.1.2.jar -O openapi-diff.jar
          
          echo "Checking REST API breaking changes..."
          java -jar openapi-diff.jar --old main-rest-api.json --new current-rest-api.json --output rest-api-diff.md --format markdown
          
          # Check if there are breaking changes (exit code 1 means breaking changes found)
          java -jar openapi-diff.jar --old main-rest-api.json --new current-rest-api.json --fail-on-incompatible || {
            echo "::error::Breaking changes detected in REST API"
            echo "::group::REST API Changes"
            cat rest-api-diff.md || echo "No diff output available"
            echo "::endgroup::"
            exit 1
          }

      - name: Check REST Metadata API Breaking Changes
        run: |
          echo "Checking REST Metadata API breaking changes..."
          java -jar openapi-diff.jar --old main-rest-metadata-api.json --new current-rest-metadata-api.json --output rest-metadata-api-diff.md --format markdown
          
          # Check if there are breaking changes
          java -jar openapi-diff.jar --old main-rest-metadata-api.json --new current-rest-metadata-api.json --fail-on-incompatible || {
            echo "::error::Breaking changes detected in REST Metadata API"
            echo "::group::REST Metadata API Changes"
            cat rest-metadata-api-diff.md || echo "No diff output available"
            echo "::endgroup::"
            exit 1
          }

      - name: Comment API Changes on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🚨 API Breaking Changes Detected\n\n';
            
            try {
              if (fs.existsSync('rest-api-diff.md')) {
                const restDiff = fs.readFileSync('rest-api-diff.md', 'utf8');
                comment += '### REST API Changes\n```markdown\n' + restDiff + '\n```\n\n';
              }
              
              if (fs.existsSync('rest-metadata-api-diff.md')) {
                const metadataDiff = fs.readFileSync('rest-metadata-api-diff.md', 'utf8');
                comment += '### REST Metadata API Changes\n```markdown\n' + metadataDiff + '\n```\n\n';
              }
              
              comment += 'Please review these changes carefully before merging.';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post comment:', error);
            }

      - name: Cleanup servers
        if: always()
        run: |
          if [ -f /tmp/current-server.pid ]; then
            kill $(cat /tmp/current-server.pid) || true
          fi
          if [ -f /tmp/main-server.pid ]; then
            kill $(cat /tmp/main-server.pid) || true
          fi

      - name: Upload API specifications and diffs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-specifications-and-diffs
          path: |
            /tmp/main-server.log
            /tmp/current-server.log
            *-api.json
            *-diff.md

      - name: Restore current branch files
        run: |
          # Move current branch files back to working directory
          mv /tmp/current-branch-files/* . 2>/dev/null || echo "No files to restore"
          
          # Verify all files are present
          echo "All API files after restoration:"
          ls -la current-* main-* 2>/dev/null || echo "Some files may be missing"
          
          # Clean up temp directory
          rm -rf /tmp/current-branch-files

          echo "All downloaded API files:"
          ls -la *-*.json 