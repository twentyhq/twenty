// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Field metadata morph relation creation should fail relation MANY_TO_ONE when targetFieldLabel conflicts with an existing field on target object metadata id 1`] = `
[
  {
    "extensions": {
      "code": "METADATA_VALIDATION_FAILED",
      "subCode": "Name not available",
      "userFriendlyMessage": "This name is not available as it is already used by another field.",
    },
    "message": "Name "collisionfieldlabel" is not available as it is already used by another field",
    "name": "UserInputError",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation MANY_TO_ONE when targetFieldLabel contains only whitespace 1`] = `
[
  {
    "extensions": {
      "code": "METADATA_VALIDATION_FAILED",
      "subCode": "Invalid label",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Invalid label: "   "",
    "name": "UserInputError",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation MANY_TO_ONE when targetFieldLabel exceeds maximum length 1`] = `
[
  {
    "extensions": {
      "code": "METADATA_VALIDATION_FAILED",
      "subCode": "Exceeds max length",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Name is too long: it exceeds the 63 characters limit.",
    "name": "UserInputError",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation MANY_TO_ONE when targetFieldLabel is empty 1`] = `
[
  {
    "extensions": {
      "code": "METADATA_VALIDATION_FAILED",
      "subCode": "Input too short",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Input is too short: """,
    "name": "UserInputError",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation MANY_TO_ONE when targetObjectMetadataId is unknown 1`] = `
[
  {
    "extensions": {
      "code": "INTERNAL_SERVER_ERROR",
      "exceptionEventId": "mocked-exception-id",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Target object metadata does not exist in the object metadata maps",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation MANY_TO_ONE when type is a wrong value 1`] = `
[
  {
    "extensions": {
      "code": "INTERNAL_SERVER_ERROR",
      "exceptionEventId": "mocked-exception-id",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Invalid relation type (wrong) for field owner on firstTargetRelation",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation MANY_TO_ONE when type is not provided 1`] = `
[
  {
    "extensions": {
      "code": "INTERNAL_SERVER_ERROR",
      "exceptionEventId": "mocked-exception-id",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Invalid relation type (undefined) for field owner on firstTargetRelation",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation ONE_TO_MANY when targetFieldLabel conflicts with an existing field on target object metadata id 1`] = `
[
  {
    "extensions": {
      "code": "METADATA_VALIDATION_FAILED",
      "subCode": "Name not available",
      "userFriendlyMessage": "This name is not available as it is already used by another field.",
    },
    "message": "Name "collisionfieldlabel" is not available as it is already used by another field",
    "name": "UserInputError",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation ONE_TO_MANY when targetFieldLabel contains only whitespace 1`] = `
[
  {
    "extensions": {
      "code": "METADATA_VALIDATION_FAILED",
      "subCode": "Invalid label",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Invalid label: "   "",
    "name": "UserInputError",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation ONE_TO_MANY when targetFieldLabel exceeds maximum length 1`] = `
[
  {
    "extensions": {
      "code": "METADATA_VALIDATION_FAILED",
      "subCode": "Exceeds max length",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Name is too long: it exceeds the 63 characters limit.",
    "name": "UserInputError",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation ONE_TO_MANY when targetFieldLabel is empty 1`] = `
[
  {
    "extensions": {
      "code": "METADATA_VALIDATION_FAILED",
      "subCode": "Input too short",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Input is too short: """,
    "name": "UserInputError",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation ONE_TO_MANY when targetObjectMetadataId is unknown 1`] = `
[
  {
    "extensions": {
      "code": "INTERNAL_SERVER_ERROR",
      "exceptionEventId": "mocked-exception-id",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Target object metadata does not exist in the object metadata maps",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation ONE_TO_MANY when type is a wrong value 1`] = `
[
  {
    "extensions": {
      "code": "INTERNAL_SERVER_ERROR",
      "exceptionEventId": "mocked-exception-id",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Invalid relation type (wrong) for field owner on firstTargetRelation",
  },
]
`;

exports[`Field metadata morph relation creation should fail relation ONE_TO_MANY when type is not provided 1`] = `
[
  {
    "extensions": {
      "code": "INTERNAL_SERVER_ERROR",
      "exceptionEventId": "mocked-exception-id",
      "userFriendlyMessage": "An error occurred.",
    },
    "message": "Invalid relation type (undefined) for field owner on firstTargetRelation",
  },
]
`;
